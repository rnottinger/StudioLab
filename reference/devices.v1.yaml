openapi: 3.0.0
info:
  title: devices
  version: '1.0'
  description: this is a description
  contact:
    name: Prichard Ausomger
    url: www.example.com
    email: richard.ottinger@gmail.com
  termsOfService: www.legit.com
  license:
    name: MIT
    url: www.example.com/license
servers:
  - url: 'http://localhost:3000'
paths:
  '/users/{userId}':
    parameters:
      - schema:
          type: integer
        name: userId
        in: path
        required: true
        description: Id of an existing user.
    get:
      summary: Get User Info by User ID
      tags: []
      responses:
        '200':
          description: User Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Get User Alice Smith:
                  value:
                    id: 142
                    firstName: Alice
                    lastName: Smith
                    email: alice.smith@gmail.com
                    dateOfBirth: '1997-10-31'
                    emailVerified: true
                    signUpDate: '2019-08-24'
        '404':
          description: User Not Found
      operationId: get-users-userId
      description: Retrieve the information of the user with the matching user ID.
    patch:
      summary: Update User Information
      operationId: patch-users-userId
      responses:
        '200':
          description: User Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Updated User Rebecca Baker:
                  value:
                    id: 13
                    firstName: Rebecca
                    lastName: Baker
                    email: rebecca@gmail.com
                    dateOfBirth: '1985-10-02'
                    emailVerified: false
                    createDate: '2019-08-24'
        '404':
          description: User Not Found
        '409':
          description: Email Already Taken
      description: Update the infromation of an existing user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  description: 'If a new email is given, the user''s email verified property will be set to false.'
                dateOfBirth:
                  type: string
            examples:
              Update First Name:
                value:
                  firstName: Rebecca
              Update Email:
                value:
                  email: rebecca@gmail.com
              Update Last Name & Date of Birth:
                value:
                  lastName: Baker
                  dateOfBirth: '1985-10-02'
        description: Patch user properties to update.
  /user:
    post:
      summary: Create New User
      operationId: post-user
      responses:
        '200':
          description: User Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                New User Bob Fellow:
                  value:
                    id: 12
                    firstName: Bob
                    lastName: Fellow
                    email: bob.fellow@gmail.com
                    dateOfBirth: '1996-08-24'
                    emailVerified: false
                    createDate: '2020-11-18'
        '400':
          description: Missing Required Information
        '409':
          description: Email Already Taken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                dateOfBirth:
                  type: string
                  format: date
              required:
                - firstName
                - lastName
                - email
                - dateOfBirth
            examples:
              Create User Bob Fellow:
                value:
                  firstName: Bob
                  lastName: Fellow
                  email: bob.fellow@gmail.com
                  dateOfBirth: '1996-08-24'
        description: Post the necessary fields for the API to create a new user.
      description: Create a new user.
  '/api/devices/{accountid}':
    get:
      summary: getDevices
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/device.v1.json
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: ../models/error.v1.yaml
      operationId: get-api-devices
      parameters:
        - $ref: '#/components/parameters/deviceid'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/spaceid'
      security:
        - API Key - 1: []
    post:
      summary: newDevice
      tags: []
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: ../models/responseCode.v1.yaml
      operationId: post-api-devices
      parameters:
        - $ref: '#/components/parameters/deviceName'
        - $ref: '#/components/parameters/spaceid'
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/device.v1.json
    parameters:
      - schema:
          type: string
          example: jetsonsHome
        name: accountid
        in: path
        required: true
        description: unique account id
components:
  schemas:
    User:
      title: User
      type: object
      description: ''
      x-examples:
        Alice Smith:
          id: 142
          firstName: Alice
          lastName: Smith
          email: alice.smith@gmail.com
          dateOfBirth: '1997-10-31'
          emailVerified: true
          signUpDate: '2019-08-24'
      properties:
        id:
          type: integer
          description: Unique identifier for the given user.
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        dateOfBirth:
          type: string
          format: date
          example: '1997-10-31'
        emailVerified:
          type: boolean
          description: Set to true if the user's email has been verified.
        createDate:
          type: string
          format: date
          description: The date that the user was created.
      required:
        - id
        - firstName
        - lastName
        - email
        - emailVerified
  parameters:
    accountid:
      schema:
        type: string
        example: jetsonsFutureHome
      name: accountid
      in: path
      required: true
      description: unique per account (see `'My Account'` for more information)
    spaceid:
      schema:
        type: string
        example: seattle-office
        default: all
      in: query
      name: spaceid
      description: location associated with the devices (see `'My Spaces'` for more information)
      allowEmptyValue: true
    deviceName:
      schema:
        type: string
        default: newDevice
        example: garageCamera
      in: header
      name: deviceName
      description: devices in the same space require unique names or will be assigned the default name `'newDevice'`
      allowEmptyValue: true
    deviceid:
      schema:
        type: string
        default: all
        example: 123abc
      in: header
      name: deviceid
      description: 'unique identifiers for devices registered on the service cloud, when empty it defaults to `''all''`'
      allowEmptyValue: true
      required: true
    sort:
      schema:
        type: string
        enum:
          - asc
          - desc
        default: desc
        example: asc
      in: query
      name: sort
      allowEmptyValue: true
      description: will sort objects returned from the request
    limit:
      schema:
        type: integer
        default: 10
        format: int32
        example: 15
        maximum: 25
        minimum: 1
      in: query
      name: limit
      allowEmptyValue: true
      description: specify the number of results returned from the request
  securitySchemes:
    API Key - 1:
      name: API Key
      type: apiKey
      in: query
